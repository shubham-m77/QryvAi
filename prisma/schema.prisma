generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  name             String?
  image            String?
  password         String?
  emailVerified    DateTime?
  industry         String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  bio              String?
  experience       Int?
  skills           String?
  accounts         Account[]
  assesments       Assessment[]
  coverLetter      CoverLetter[]
  resumes          Resume?
  sessions         Session[]
  industryInsights IndustryInsight? @relation(fields: [industry], references: [industry])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String?
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Assessment {
  id             String   @id @default(uuid())
  userId         String
  quizScore      Float
  questions      Json[]
  category       String
  improvementTip String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Resume {
  id        String   @id @default(uuid())
  userId    String   @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CoverLetter {
  id             String   @id @default(uuid())
  userId         String
  content        String
  jonDescription String?
  companyName    String
  jobTitle       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model IndustryInsight {
  id                String        @id @default(uuid())
  industry          String        @unique
  salaryRange       Json[]
  growthRate        Float?
  demandLevel       DemandLevel
  topSkills         String[]
  marketOutlook     MarketOutlook
  keyTrends         String[]
  recommendedSkills String[]
  lastUpdated       DateTime      @default(now())
  nextUpdate        DateTime
  users             User[]

  @@index([industry])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}
